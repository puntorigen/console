!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.npmPackageES6console=t()}(this,function(){"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function t(e,t){return e(t={exports:{}},t.exports),t.exports}var r=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e},o=Object.freeze({default:r,__moduleExports:r}),n=o&&r||o,u=function(e){return Object(n(e))},f=Object.freeze({default:u,__moduleExports:u}),i={}.hasOwnProperty,l=function(e,t){return i.call(e,t)},c=Object.freeze({default:l,__moduleExports:l}),a={}.toString,s=function(e){return a.call(e).slice(8,-1)},d=Object.freeze({default:s,__moduleExports:s}),p=d&&s||d,_=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==p(e)?e.split(""):Object(e)},b=Object.freeze({default:_,__moduleExports:_}),v=b&&_||b,h=function(e){return v(n(e))},g=Object.freeze({default:h,__moduleExports:h}),m=Math.ceil,O=Math.floor,j=function(e){return isNaN(e=+e)?0:(e>0?O:m)(e)},y=Object.freeze({default:j,__moduleExports:j}),x=y&&j||y,E=Math.min,z=function(e){return e>0?E(x(e),9007199254740991):0},w=Object.freeze({default:z,__moduleExports:z}),M=Math.max,S=Math.min,P=function(e,t){return 0>(e=x(e))?M(e+t,0):S(e,t)},k=Object.freeze({default:P,__moduleExports:P}),I=g&&h||g,q=w&&z||w,T=k&&P||k,F=function(e){return function(t,r,o){var n,u=I(t),f=q(u.length),i=T(o,f);if(e&&r!=r){for(;f>i;)if((n=u[i++])!=n)return!0}else for(;f>i;i++)if((e||i in u)&&u[i]===r)return e||i||0;return!e&&-1}},R=Object.freeze({default:F,__moduleExports:F}),C=t(function(e){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)}),L=Object.freeze({default:C,__moduleExports:C}),B=L&&C||L,G=B["__core-js_shared__"]||(B["__core-js_shared__"]={}),H=function(e){return G[e]||(G[e]={})},N=Object.freeze({default:H,__moduleExports:H}),W=0,A=Math.random(),D=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++W+A).toString(36))},J=Object.freeze({default:D,__moduleExports:D}),U=J&&D||J,K=(N&&H||N)("keys"),Q=function(e){return K[e]||(K[e]=U(e))},V=Object.freeze({default:Q,__moduleExports:Q}),X=c&&l||c,Y=V&&Q||V,Z=(R&&F||R)(!1),$=Y("IE_PROTO"),ee=function(e,t){var r,o=I(e),n=0,u=[];for(r in o)r!=$&&X(o,r)&&u.push(r);for(;t.length>n;)X(o,r=t[n++])&&(~Z(u,r)||u.push(r));return u},te=Object.freeze({default:ee,__moduleExports:ee}),re="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),oe=Object.freeze({default:re,__moduleExports:re}),ne=te&&ee||te,ue=oe&&re||oe,fe=Object.keys||function(e){return ne(e,ue)},ie=Object.freeze({default:fe,__moduleExports:fe}),le=t(function(e){var t=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=t)}),ce=Object.freeze({default:le,__moduleExports:le,version:le.version}),ae=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e},se=Object.freeze({default:ae,__moduleExports:ae}),de=se&&ae||se,pe=function(e,t,r){if(de(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,o){return e.call(t,r,o)};case 3:return function(r,o,n){return e.call(t,r,o,n)}}return function(){return e.apply(t,arguments)}},_e=Object.freeze({default:pe,__moduleExports:pe}),be=function(e){return"object"==typeof e?null!==e:"function"==typeof e},ve=Object.freeze({default:be,__moduleExports:be}),he=ve&&be||ve,ge=function(e){if(!he(e))throw TypeError(e+" is not an object!");return e},me=Object.freeze({default:ge,__moduleExports:ge}),Oe=function(e){try{return!!e()}catch(e){return!0}},je=Object.freeze({default:Oe,__moduleExports:Oe}),ye=je&&Oe||je,xe=!ye(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),Ee=Object.freeze({default:xe,__moduleExports:xe}),ze=B.document,we=he(ze)&&he(ze.createElement),Me=function(e){return we?ze.createElement(e):{}},Se=Object.freeze({default:Me,__moduleExports:Me}),Pe=Ee&&xe||Ee,ke=Se&&Me||Se,Ie=!Pe&&!ye(function(){return 7!=Object.defineProperty(ke("div"),"a",{get:function(){return 7}}).a}),qe=Object.freeze({default:Ie,__moduleExports:Ie}),Te=function(e,t){if(!he(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!he(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!he(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!he(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")},Fe=Object.freeze({default:Te,__moduleExports:Te}),Re=me&&ge||me,Ce=qe&&Ie||qe,Le=Fe&&Te||Fe,Be=Object.defineProperty,Ge=Pe?Object.defineProperty:function(e,t,r){if(Re(e),t=Le(t,!0),Re(r),Ce)try{return Be(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e},He={f:Ge},Ne=Object.freeze({default:He,__moduleExports:He,f:Ge}),We=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},Ae=Object.freeze({default:We,__moduleExports:We}),De=Ne&&He||Ne,Je=Ae&&We||Ae,Ue=Pe?function(e,t,r){return De.f(e,t,Je(1,r))}:function(e,t,r){return e[t]=r,e},Ke=Object.freeze({default:Ue,__moduleExports:Ue}),Qe=ce&&le||ce,Ve=_e&&pe||_e,Xe=Ke&&Ue||Ke,Ye=function(e,t,r){var o,n,u,f=e&Ye.F,i=e&Ye.G,l=e&Ye.S,c=e&Ye.P,a=e&Ye.B,s=e&Ye.W,d=i?Qe:Qe[t]||(Qe[t]={}),p=d.prototype,_=i?B:l?B[t]:(B[t]||{}).prototype;for(o in i&&(r=t),r)(n=!f&&_&&void 0!==_[o])&&X(d,o)||(u=n?_[o]:r[o],d[o]=i&&"function"!=typeof _[o]?r[o]:a&&n?Ve(u,B):s&&_[o]==u?function(e){var t=function(t,r,o){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,o)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(u):c&&"function"==typeof u?Ve(Function.call,u):u,c&&((d.virtual||(d.virtual={}))[o]=u,e&Ye.R&&p&&!p[o]&&Xe(p,o,u)))};Ye.F=1,Ye.G=2,Ye.S=4,Ye.P=8,Ye.B=16,Ye.W=32,Ye.U=64,Ye.R=128;var Ze=Ye,$e=Object.freeze({default:Ze,__moduleExports:Ze}),et=$e&&Ze||$e,tt=function(e,t){var r=(Qe.Object||{})[e]||Object[e],o={};o[e]=t(r),et(et.S+et.F*ye(function(){r(1)}),"Object",o)},rt=Object.freeze({default:tt,__moduleExports:tt}),ot=f&&u||f,nt=ie&&fe||ie;(rt&&tt||rt)("keys",function(){return function(e){return nt(ot(e))}});var ut=Qe.Object.keys,ft=Object.freeze({default:ut,__moduleExports:ut}),it=ft&&ut||ft,lt=e(t(function(e){e.exports={default:it,__esModule:!0}})),ct=Object.getOwnPropertySymbols,at={f:ct},st=Object.freeze({default:at,__moduleExports:at,f:ct}),dt={}.propertyIsEnumerable,pt={f:dt},_t=Object.freeze({default:pt,__moduleExports:pt,f:dt}),bt=st&&at||st,vt=_t&&pt||_t,ht=Object.assign,gt=!ht||ye(function(){var e={},t={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach(function(e){t[e]=e}),7!=ht({},e)[r]||Object.keys(ht({},t)).join("")!=o})?function(e,t){for(var r=ot(e),o=arguments.length,n=1,u=bt.f,f=vt.f;o>n;)for(var i,l=v(arguments[n++]),c=u?nt(l).concat(u(l)):nt(l),a=c.length,s=0;a>s;)f.call(l,i=c[s++])&&(r[i]=l[i]);return r}:ht,mt=Object.freeze({default:gt,__moduleExports:gt});et(et.S+et.F,"Object",{assign:mt&&gt||mt});var Ot=Qe.Object.assign,jt=Object.freeze({default:Ot,__moduleExports:Ot}),yt=jt&&Ot||jt,xt=t(function(e){e.exports={default:yt,__esModule:!0}}),Et=e(xt),zt=Object.freeze({default:Et,__moduleExports:xt}),wt=zt&&Et||zt,Mt=e(t(function(e,t){t.__esModule=!0;var r,o=(r=wt)&&r.__esModule?r:{default:r};t.default=o.default||function(e){for(var t=1;arguments.length>t;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e}})),St=e(t(function(e,t){t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}}));et(et.S+et.F*!Pe,"Object",{defineProperty:De.f});var Pt=Qe.Object,kt=function(e,t,r){return Pt.defineProperty(e,t,r)},It=Object.freeze({default:kt,__moduleExports:kt}),qt=It&&kt||It,Tt=t(function(e){e.exports={default:qt,__esModule:!0}}),Ft=e(Tt),Rt=Object.freeze({default:Ft,__moduleExports:Tt}),Ct=Rt&&Ft||Rt,Lt=e(t(function(e,t){t.__esModule=!0;var r,o=(r=Ct)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var r=0;t.length>r;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,o.default)(e,n.key,n)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}()}));return function(){function e(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).config;St(this,e);this.config=Mt({},t,{silent:!1,prefix:""})}return Lt(e,[{key:"setSilent",value:function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).value,t=void 0===e?this.throwIfMissing("value"):e;this.config.silent=t}},{key:"setPrefix",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.prefix,r=e.color;if(t&&(this.config.prefix=t),r&&""!=this.config.prefix){var o="["+this.config.prefix+"] ",n=require("colors/safe");this.config.prefix=n[r](o)}else this.config.prefix="["+this.config.prefix+"] "}},{key:"clear",value:function(){require("clear-any-console")()}},{key:"out",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.message,r=void 0===t?this.throwIfMissing("message"):t,o=e.data,n=e.color,u=r,f=require("colors/safe");this.config.silent||(n&&""!=u?console.log(n in f?this.config.prefix+f[n](u):this.config.prefix+u):-1!=u.indexOf("error:")&&console.error(this.config.prefix+f.red(u)),o&&console.log("console.out():var=",o))}},{key:"outT",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.message,r=void 0===t?this.throwIfMissing("message"):t,o=e.data,n=e.color,u=r;require("colors/safe");if(!this.config.silent){var f=new Date,i=f.getHours();10>i&&(i="0"+i);var l=f.getMinutes();10>l&&(l="0"+l);var c=f.getSeconds();10>c&&(c="0"+c);var a="["+i+":"+l+":"+c+"]: "+u.trim();this.out(o&&n?{message:a,data:o,color:n}:o?{message:a,data:o}:n?{message:a,color:n}:{message:a})}}},{key:"title",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.title,r=void 0===t?this.throwIfMissing("title"):t,o=e.color,n=e.titleColor,u=e.config,f=void 0===u?{}:u,i=require("boxen")(require("colors/safe")[n||o](r),Mt({borderColor:o,align:"center",padding:{left:2,right:2},borderStyle:{topLeft:"*",topRight:"*",bottomLeft:"*",bottomRight:"*",horizontal:"*",vertical:"*"}},f));console.log(i)}},{key:"table",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.title,r=void 0===t?this.throwIfMissing("title"):t,o=e.data,n=void 0===o?this.throwIfMissing("data"):o,u=e.struct_sort,f=e.color,i=n,l=require("colors/safe");if(u){var c=require("sort-objects-array");i=u.split(" ").length>1?c(n,u.split(" ")[0],u.split(" ")[1]):c(n,u)}var a=new(require("ascii-table"))(r),s=lt(i[0]);for(var d in a.setHeading(s),i){var p=[];for(var _ in s)p.push(i[d][s[_]]);a.addRow(p).setJustify(!0)}console.log(f?l[f](a.render()):""+a)}},{key:"throwIfMissing",value:function(e){throw Error("Missing "+e+" parameter!")}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
